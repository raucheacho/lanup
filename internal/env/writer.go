package env

import (
	"bufio"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// EnvVar represents a single environment variable
type EnvVar struct {
	Key     string
	Value   string
	Managed bool // true if managed by lanup
}

// EnvWriter handles reading and writing environment files
type EnvWriter struct {
	FilePath      string
	BackupEnabled bool
}

// NewEnvWriter creates a new EnvWriter instance
func NewEnvWriter(path string) *EnvWriter {
	return &EnvWriter{
		FilePath:      path,
		BackupEnabled: true,
	}
}

// Read parses an existing .env file and returns the variables
func (w *EnvWriter) Read() ([]EnvVar, error) {
	file, err := os.Open(w.FilePath)
	if err != nil {
		if os.IsNotExist(err) {
			// File doesn't exist yet, return empty slice
			return []EnvVar{}, nil
		}
		return nil, fmt.Errorf("failed to open file %s: %w", w.FilePath, err)
	}
	defer file.Close()

	var vars []EnvVar
	scanner := bufio.NewScanner(file)
	managed := false

	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())

		// Check for lanup:managed marker
		if strings.Contains(line, "# lanup:managed") {
			managed = true
			continue
		}

		// Skip empty lines and comments (except managed marker)
		if line == "" || strings.HasPrefix(line, "#") {
			managed = false
			continue
		}

		// Parse KEY=VALUE
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			continue
		}

		key := strings.TrimSpace(parts[0])
		value := strings.TrimSpace(parts[1])

		// Remove quotes if present
		value = strings.Trim(value, "\"'")

		vars = append(vars, EnvVar{
			Key:     key,
			Value:   value,
			Managed: managed,
		})

		managed = false
	}

	if err := scanner.Err(); err != nil {
		return nil, fmt.Errorf("error reading file %s: %w", w.FilePath, err)
	}

	return vars, nil
}

// Backup creates a backup of the existing file with .bak extension
func (w *EnvWriter) Backup() error {
	// Check if the file exists
	if _, err := os.Stat(w.FilePath); os.IsNotExist(err) {
		// No file to backup
		return nil
	}

	backupPath := w.FilePath + ".bak"

	// Read the original file
	data, err := os.ReadFile(w.FilePath)
	if err != nil {
		return fmt.Errorf("failed to read file for backup: %w", err)
	}

	// Write to backup file
	err = os.WriteFile(backupPath, data, 0644)
	if err != nil {
		return fmt.Errorf("failed to create backup file: %w", err)
	}

	return nil
}

// Merge combines new variables with existing ones, preserving non-managed variables
func (w *EnvWriter) Merge(newVars []EnvVar, existing []EnvVar) []EnvVar {
	// Create a map of existing non-managed variables
	preserved := make(map[string]EnvVar)
	for _, v := range existing {
		if !v.Managed {
			preserved[v.Key] = v
		}
	}

	// Create result slice with new managed variables
	result := make([]EnvVar, 0, len(newVars)+len(preserved))

	// Add all new managed variables
	for _, v := range newVars {
		result = append(result, v)
	}

	// Add preserved non-managed variables
	for _, v := range preserved {
		result = append(result, v)
	}

	return result
}

// Write writes the environment variables to the file with proper formatting
func (w *EnvWriter) Write(vars []EnvVar) error {
	// Create backup if enabled
	if w.BackupEnabled {
		if err := w.Backup(); err != nil {
			return fmt.Errorf("failed to create backup: %w", err)
		}
	}

	// Ensure directory exists
	dir := filepath.Dir(w.FilePath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return fmt.Errorf("failed to create directory: %w", err)
	}

	// Open file for writing
	file, err := os.Create(w.FilePath)
	if err != nil {
		return fmt.Errorf("failed to create file: %w", err)
	}
	defer file.Close()

	writer := bufio.NewWriter(file)

	// Write header
	timestamp := time.Now().Format("2006-01-02 15:04:05")
	header := fmt.Sprintf("# Generated by lanup on %s\n# Do not edit the managed variables manually\n\n", timestamp)
	if _, err := writer.WriteString(header); err != nil {
		return fmt.Errorf("failed to write header: %w", err)
	}

	// Separate managed and non-managed variables
	var managedVars []EnvVar
	var userVars []EnvVar

	for _, v := range vars {
		if v.Managed {
			managedVars = append(managedVars, v)
		} else {
			userVars = append(userVars, v)
		}
	}

	// Write managed variables
	for _, v := range managedVars {
		if _, err := writer.WriteString("# lanup:managed\n"); err != nil {
			return fmt.Errorf("failed to write managed marker: %w", err)
		}
		if _, err := writer.WriteString(fmt.Sprintf("%s=%s\n", v.Key, v.Value)); err != nil {
			return fmt.Errorf("failed to write variable: %w", err)
		}
	}

	// Write separator if there are user variables
	if len(userVars) > 0 {
		if _, err := writer.WriteString("\n# User variables (preserved)\n"); err != nil {
			return fmt.Errorf("failed to write separator: %w", err)
		}

		// Write user variables
		for _, v := range userVars {
			if _, err := writer.WriteString(fmt.Sprintf("%s=%s\n", v.Key, v.Value)); err != nil {
				return fmt.Errorf("failed to write variable: %w", err)
			}
		}
	}

	// Flush the buffer
	if err := writer.Flush(); err != nil {
		return fmt.Errorf("failed to flush writer: %w", err)
	}

	return nil
}

// transformURL replaces localhost or 127.0.0.1 with the detected IP address
func transformURL(url string, newIP string) string {
	// Replace localhost
	url = strings.ReplaceAll(url, "localhost", newIP)

	// Replace 127.0.0.1
	url = strings.ReplaceAll(url, "127.0.0.1", newIP)

	return url
}
